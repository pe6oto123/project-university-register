@using Newtonsoft.Json
@model IEnumerable<project_mvc.Models.AnalysisModels.Derived.TeachersGraph>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">

@{
	ViewData["Title"] = "TeachersGraphs";
}


<div class="container">
	<div style="display:flex;margin:0.5rem">
		@Html.DropDownList("faculty-list",
		new SelectList(Model, "FacultyId", "FacultyName"), new
		{
		@class = "form-control",
		onchange = $"updateSubjectList()",
		style = "width:fit-content;text-align:center;margin-right:1rem"
		})

		@foreach (var faculty in Model)
		{
			@Html.DropDownList($"subject-list-facultyId-{faculty.FacultyId}",
		new SelectList(faculty.TeachersSubjectGraph, "SubjectId", "SubjectName"), new
		{
		@class = "form-control",
		onchange = $"updateGraph({faculty.FacultyId})",
		style = "display: none; width: fit-content; text-align: center; min-width: 20rem"
		})
		}
	</div>
	<div id="chartContainer" style="height: 50rem; width: 100%; margin: auto"></div>
</div>

<script>
	let facultyListId

	const updateGraph = (facultyId) => {
		const subjectId = $(`#subject-list-facultyId-${facultyId} :selected`).val()
		let teachers
		let totalAverage = 0
		try {
			
			teachers = @(Html.Raw(JsonConvert.SerializeObject(Model)))
					.find(s => s.FacultyId == facultyId).TeachersSubjectGraph
					.find(s => s.SubjectId == subjectId).TeachersGradeGraph

			for (let teacher of teachers)
				totalAverage += teacher["y"]
			totalAverage /= teachers.length
			totalAverage = parseFloat(totalAverage).toFixed(2)
		} catch (err) {}

		const chart = new CanvasJS.Chart("chartContainer", {
			animationEnabled: true,
			theme: "light2", // "light1", "dark1", "dark2"
			exportEnabled: true,
			title: {
				text: "Average Grade By Teachers"
			},
			axisY: {
				title: "Grade",
				minimum: 1.95,
				maxium: 6,
				stripLines: [{
					showOnTop: true,
					thickness: 2,
					labelFontSize: 22,
					color: "black",
					labelFontColor: "black",
					value: totalAverage,
					label: `Overall grade ${totalAverage}`
				}]
			},
			data: [{
				type: "column",
				dataPoints: teachers
			}]
		});
		chart.render();
	}

	const updateSubjectList = () => {
		const facultyId = $(`#faculty-list :selected`).val()
		try {
			$(`#subject-list-facultyId-${selectedFaculty}`).hide()
		} catch (err) { }

		$(`#subject-list-facultyId-${facultyId}`).show()
		$(`#subject-list-facultyId-${facultyId}`).prop("selectedIndex", 0)
		selectedFaculty = facultyId

		updateGraph(facultyId)
	}

	window.onload = () => {
		updateSubjectList()
		const subjectFacultyId = $(`#subject-list-facultyId-${selectedFaculty}`).val()
		updateGraph(subjectFacultyId)
	}
</script>
<script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
